{"version":3,"sources":["App.js","index.js"],"names":["App","useState","hours","setHours","mins","setMins","sec","setSec","pad","value","String","padStart","type","onClick","startData","Date","now","setInterval","time","hoursComp","Math","floor","minsComp","secComp","getTimeComponents","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAEe,SAASA,IAAO,IAAD,EACFC,mBAAS,MADP,mBACrBC,EADqB,KACdC,EADc,OAEJF,mBAAS,MAFL,mBAErBG,EAFqB,KAEfC,EAFe,OAGNJ,mBAAS,MAHH,mBAGrBK,EAHqB,KAGhBC,EAHgB,KAiB5B,SAASC,EAAIC,GACX,OAAOC,OAAOD,GAAOE,SAAS,EAAG,KAYnC,OACE,gCACE,4BAAIT,IACJ,4BAAIE,IACJ,4BAAIE,IACJ,wBAAQM,KAAK,SAASC,QA9BZ,WACZ,IAAMC,EAAYC,KAAKC,MACvBC,aAAY,WACV,IADgB,EAcpB,SAA2BC,GACzB,IAAMC,EAAYX,EAChBY,KAAKC,MAAOH,EAAI,MAAL,OAEPI,EAAWd,EAAIY,KAAKC,MAAOH,EAAI,KAAL,MAC1BK,EAAUf,EAAIY,KAAKC,MAAOH,EAAI,IAAkB,MACtD,MAAO,CAAEC,YAAWG,WAAUC,WAjBaC,CAFrBT,KAAKC,MACOF,GACxBK,EAHQ,EAGRA,UAAWG,EAHH,EAGGA,SAAUC,EAHb,EAGaA,QAC7BpB,EAASgB,GACTd,EAAQiB,GACRf,EAAOgB,KACN,MAqBD,qDChCNE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC3B,EAAD,MAEF4B,SAASC,eAAe,W","file":"static/js/main.6fee077a.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport default function App() {\n  const [hours, setHours] = useState(\"00\");\n  const [mins, setMins] = useState(\"00\");\n  const [sec, setSec] = useState(\"00\");\n\n  const timer = () => {\n    const startData = Date.now();\n    setInterval(() => {\n      const currentData = Date.now();\n      const deltaDate = currentData - startData;\n      const { hoursComp, minsComp, secComp } = getTimeComponents(deltaDate);\n      setHours(hoursComp);\n      setMins(minsComp);\n      setSec(secComp);\n    }, 1000);\n  };\n\n  function pad(value) {\n    return String(value).padStart(2, \"0\");\n  }\n\n  function getTimeComponents(time) {\n    const hoursComp = pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n    );\n    const minsComp = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secComp = pad(Math.floor((time % (1000 * 60)) / 1000));\n    return { hoursComp, minsComp, secComp };\n  }\n\n  return (\n    <div>\n      <p>{hours}</p>\n      <p>{mins}</p>\n      <p>{sec}</p>\n      <button type=\"button\" onClick={timer}>\n        запуск\n      </button>\n    </div>\n  );\n}\n\n// Не вижу смысла сохранять отдельно часы, минуты, сек. Храни просто таймер в ms. А в рендере используй\n// new Date(ms).toISOString().slice(11,19)\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}