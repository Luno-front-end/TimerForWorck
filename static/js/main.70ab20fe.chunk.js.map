{"version":3,"sources":["App.js","index.js"],"names":["App","useState","hours","setHours","mins","setMins","sec","setSec","intervalId","setIntervalId","isActive","setIsActive","timesetPause","setTimesetPause","timer","startTime","Date","now","setInterval","deltaDate","getTimeComponents","hoursComp","minsComp","secComp","console","log","timerStop","clearInterval","pad","value","String","padStart","time","Math","floor","type","onClick","newStartDate","deltaDateWeit","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAEe,SAASA,IAAO,IAAD,EACFC,mBAAS,MADP,mBACrBC,EADqB,KACdC,EADc,OAEJF,mBAAS,MAFL,mBAErBG,EAFqB,KAEfC,EAFe,OAGNJ,mBAAS,MAHH,mBAGrBK,EAHqB,KAGhBC,EAHgB,OAIQN,mBAAS,MAJjB,mBAIrBO,EAJqB,KAITC,EAJS,OAKIR,oBAAS,GALb,mBAKrBS,EALqB,KAKXC,EALW,OAMYV,mBAAS,MANrB,mBAMrBW,EANqB,KAMPC,EANO,KAQtBC,EAAQ,WACZ,IAAMC,EAAYC,KAAKC,MACvBR,EACES,aAAY,WACV,IACMC,EADcH,KAAKC,MACOF,EAChCF,EAAgBM,GAHA,MAIyBC,EAAkBD,GAAnDE,EAJQ,EAIRA,UAAWC,EAJH,EAIGA,SAAUC,EAJb,EAIaA,QAC7BpB,EAASkB,GACThB,EAAQiB,GACRf,EAAOgB,GACPC,QAAQC,QACP,MAELd,GAAY,IAWRe,EAAY,WAChBC,cAAcnB,GACdK,EAAgB,MAChBF,GAAY,GACZR,EAAS,MACTE,EAAQ,MACRE,EAAO,OAmCT,SAASqB,EAAIC,GACX,OAAOC,OAAOD,GAAOE,SAAS,EAAG,KAGnC,SAASX,EAAkBY,GAMzB,MAAO,CAAEX,UALSO,EAChBK,KAAKC,MAAOF,EAAI,MAAL,OAIOV,SAFHM,EAAIK,KAAKC,MAAOF,EAAI,KAAL,MAEFT,QADdK,EAAIK,KAAKC,MAAOF,EAAI,IAAkB,OAIxD,OACE,gCACE,4BAAI9B,IACJ,4BAAIE,IACJ,4BAAIE,IACJ,wBAAQ6B,KAAK,SAASC,QAnEP,WACb1B,GAIJI,KA8DE,kDAGA,wBAAQqB,KAAK,SAASC,QAASV,EAA/B,kBAGA,wBAAQS,KAAK,SAASC,QAxDP,WACjBV,IACAZ,KAsDE,mBAGA,wBAAQqB,KAAK,SAASC,QAvDR,WAChB,GAAI5B,EAIF,OAHAmB,cAAcnB,GACdG,GAAY,QACZF,EAAc,MAIhB,GAAIG,EAAc,CAChB,IAAMyB,EAAerB,KAAKC,MAC1BR,EACES,aAAY,WACV,IACMoB,EADgBtB,KAAKC,MACWoB,EAAezB,EACrDC,EAAgByB,GAHA,MAIyBlB,EACvCkB,GADMjB,EAJQ,EAIRA,UAAWC,EAJH,EAIGA,SAAUC,EAJb,EAIaA,QAG7BpB,EAASkB,GACThB,EAAQiB,GACRf,EAAOgB,GACPC,QAAQC,QACP,MAELd,GAAY,KA+BZ,qBClGN4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACzC,EAAD,MAEF0C,SAASC,eAAe,W","file":"static/js/main.70ab20fe.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nexport default function App() {\n  const [hours, setHours] = useState(\"00\");\n  const [mins, setMins] = useState(\"00\");\n  const [sec, setSec] = useState(\"00\");\n  const [intervalId, setIntervalId] = useState(null);\n  const [isActive, setIsActive] = useState(false);\n  const [timesetPause, setTimesetPause] = useState(null);\n\n  const timer = () => {\n    const startTime = Date.now();\n    setIntervalId(\n      setInterval(() => {\n        const currentTime = Date.now();\n        const deltaDate = currentTime - startTime;\n        setTimesetPause(deltaDate);\n        const { hoursComp, minsComp, secComp } = getTimeComponents(deltaDate);\n        setHours(hoursComp);\n        setMins(minsComp);\n        setSec(secComp);\n        console.log();\n      }, 1000)\n    );\n    setIsActive(true);\n  };\n\n  const timerStart = () => {\n    if (isActive) {\n      return;\n    }\n\n    timer();\n  };\n\n  const timerStop = () => {\n    clearInterval(intervalId);\n    setTimesetPause(null);\n    setIsActive(false);\n    setHours(\"00\");\n    setMins(\"00\");\n    setSec(\"00\");\n  };\n\n  const timerReset = () => {\n    timerStop();\n    timer();\n  };\n  const timerWite = () => {\n    if (intervalId) {\n      clearInterval(intervalId);\n      setIsActive(false);\n      setIntervalId(null);\n      return;\n    }\n\n    if (timesetPause) {\n      const newStartDate = Date.now();\n      setIntervalId(\n        setInterval(() => {\n          const newCurentDate = Date.now();\n          const deltaDateWeit = newCurentDate - newStartDate + timesetPause;\n          setTimesetPause(deltaDateWeit);\n          const { hoursComp, minsComp, secComp } = getTimeComponents(\n            deltaDateWeit\n          );\n          setHours(hoursComp);\n          setMins(minsComp);\n          setSec(secComp);\n          console.log();\n        }, 1000)\n      );\n      setIsActive(true);\n    }\n  };\n\n  function pad(value) {\n    return String(value).padStart(2, \"0\");\n  }\n\n  function getTimeComponents(time) {\n    const hoursComp = pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n    );\n    const minsComp = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secComp = pad(Math.floor((time % (1000 * 60)) / 1000));\n    return { hoursComp, minsComp, secComp };\n  }\n\n  return (\n    <div>\n      <p>{hours}</p>\n      <p>{mins}</p>\n      <p>{sec}</p>\n      <button type=\"button\" onClick={timerStart}>\n        запуск\n      </button>\n      <button type=\"button\" onClick={timerStop}>\n        Stop\n      </button>\n      <button type=\"button\" onClick={timerReset}>\n        Reset\n      </button>\n      <button type=\"button\" onClick={timerWite}>\n        Wite\n      </button>\n    </div>\n  );\n}\n\n// Не вижу смысла сохранять отдельно часы, минуты, сек. Храни просто таймер в ms. А в рендере используй\n// new Date(ms).toISOString().slice(11,19)\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}